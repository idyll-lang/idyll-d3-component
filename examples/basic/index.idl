[meta title:"d3 + Idyll" description:"An introduction to using d3 and Idyll" /]

[IdyllLogo /]

[Header
  title:"Using d3 with Idyll"
  subtitle:"An introduction to using the data visualization library with Idyll"
  author:"Matthew Conlen"
  authorLink:"https://twitter.com/mathisonian" /]

[div className:"inset" style:`{maxWidth: 150, margin: '0 auto'}`]
[a href:"https://bl.ocks.org/mbostock/2d466ec3417722e3568cd83fc35338e3"][CircleWave style:`{width: "100%"}`  /][/a]
[/div]


This is a guide for those who are familiar with d3 and wish to use d3 in the idiomatic way,
as opposed to relying on React to handle DOM updates.

Idyll defines a custom `D3Component` that you can use to create a custom d3 component.
To use it, create a class that extends from it, and implements two methods: `initialize`,
and `update`.

[gist gist:"e583bc2d6143ab867bab73701762af00" file:"idyll-d3.jsx" /]

and in your `index.idl` file, instantiate the component like this:

[gist gist:"e583bc2d6143ab867bab73701762af00" file:"d3.idl" /]

Any properties provided will be available on the props object in the component.

### iniatialize(node, props)

The initialize function is called only once when your component first mounts. Use this function to
create any necessary DOM elements and render your component with the initially provided properties.

### update(props)

This function is called any time the props object changes. Use this function e.g. to update
your component when bound data changes.


## Example

The circle at the top of this post is adapted
from [link text:"Mike Bostock's block" href:"https://bl.ocks.org/mbostock/2d466ec3417722e3568cd83fc35338e3" /],
which was inspired by [link text:"Dave Whyte's circle wave" href:"" /] (Dave Whyte often publishes
under the handle [link href:"https://twitter.com/beesandbombs" text:"@beesandbombs" /]).

To use the block, I can just stick the code into the `initialize` function. Since this doesn't take any user
input or have dynamic properties, I can omit the `update` function altogether.

[gist gist:"e583bc2d6143ab867bab73701762af00" file:"circle-wave.jsx" /]

The only changes I've made were to make the radius of the circle dynamic, and to
insert an `<svg>` element instead of expecting one to be on the page already.

## Updating props

[var name:"color" value:"#000" /]

[Force nodeColor:`color` /]

[Button onClick:`color === '#000' ? color = '#ff0000' : color = '#000' `]
Toggle Color
[/Button]

[gist gist:"e583bc2d6143ab867bab73701762af00" file:"update.idl" /]

To make this work, I've adapted code from this [link text:"d3 force dragging block" href:"https://bl.ocks.org/mbostock/ad70335eeef6d167bc36fd3c04378048" /]
and added a property to determine the node color. Since this example uses a draw loop to render
to canvas, I can simply read the node color property each loop. The final piece to make it work smoothly
is to ensure that the draw loop is triggered every time the properties update.

[gist gist:"e583bc2d6143ab867bab73701762af00" file:"force.jsx" /]

Read more about Idyll at [link href:"https://idyll-lang.github.io/" text:"https://idyll-lang.github.io/" /],
or [link href:"https://github.com/idyll-lang/idyll-d3-component/tree/master/examples/basic" text:"check out the source for this example" /].
